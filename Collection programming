byAge:
    public static Map<Integer, String> byAge(Map<String, Integer> age, int min, int max) {
        Map<Integer, String> sort = new TreeMap<>();
        for (String name : age.keySet()) {
            int ages = age.get(name);
            if (ages <= max && ages >= min) {
                if (sort.containsKey(ages)) {
                    sort.put(ages, sort.get(ages) + " and " + name);
                } else {
                    sort.put(ages, name);
                }
            }
        }
        return sort;
    }
    
cancelCourse:
    public static Set<String> cancelCourse (String course, Map<String, Set<String>> sche) {
        Set<String> sort = new TreeSet<>();
        for (String name : sche.keySet()) {
            if (sche.get(name).contains(course)) {
                sort.add(name);
                sche.get(name).remove(course);
            }
        }
        return sort;
    }
    
commonFirstLetters: 
    public static Set<String> commonFirstLetters(List<String> words) {
        Map<Character, Integer> contains = new TreeMap<>();
        Set<String> sort = new TreeSet<>();
        for (String name : words) {
            char first = name.toLowerCase().charAt(0);
            if (!contains.keySet().contains(first)){
                contains.put(first, 0);
            }
            contains.put(first, contains.get(first) + 1);
        }
        for (Character firstL : contains.keySet()) {
            if (contains.get(firstL) > 1) {
                sort.add( ""+ firstL);
            }
        }
        return sort;
    }
